name: "Simple EC2 Deployment"

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main"]
    paths-ignore:
      - "**/*.md"
      - "**/*.txt"
      - "**/*.test.js"
  workflow_dispatch:

env:
  AWS_REGION: us-east-1 # Change this to your AWS region

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Run ESLint
        run: |
          cd backend
          npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Create .env file for testing
        run: |
          echo "DB_NAME=:memory:" > backend/.env.test
          echo "DB_USER=user" >> backend/.env.test
          echo "DB_PASSWORD=password" >> backend/.env.test
          echo "DB_HOST=localhost" >> backend/.env.test
          echo "DB_DIALECT=sqlite" >> backend/.env.test
          echo "DB_PORT=5432" >> backend/.env.test

      - name: Run tests
        run: |
          cd backend
          npm test -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: backend/coverage

  security-scan:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: "javascript-typescript"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  build:
    needs: [test, security-scan, lint]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.backend
          tags: todo-backend:${{ github.sha }}
          outputs: type=docker,dest=/tmp/backend.tar

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.frontend
          tags: todo-frontend:${{ github.sha }}
          outputs: type=docker,dest=/tmp/frontend.tar

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: /tmp/backend.tar

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: /tmp/frontend.tar

  terraform-plan:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        run: |
          cd infrastructure
          terraform init

      - name: Terraform Validate
        run: |
          cd infrastructure
          terraform validate

      - name: Terraform Plan
        run: |
          cd infrastructure
          terraform plan -no-color
        env:
          TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_key_pair_name: ${{ secrets.KEY_PAIR_NAME }}

  deploy:
    needs: [build, terraform-plan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Deploy Infrastructure
        run: |
          cd infrastructure
          terraform init
          terraform apply -auto-approve
        env:
          TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_key_pair_name: ${{ secrets.KEY_PAIR_NAME }}

      - name: Get Instance Details
        id: get_instance
        run: |
          cd infrastructure
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
          INSTANCE_DNS=$(terraform output -raw instance_public_dns)
          FRONTEND_URL=$(terraform output -raw frontend_url)
          BACKEND_URL=$(terraform output -raw backend_api_url)

          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "instance_dns=$INSTANCE_DNS" >> $GITHUB_OUTPUT
          echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: /tmp/

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
          path: /tmp/

      - name: Deploy Application to EC2
        env:
          INSTANCE_IP: ${{ steps.get_instance.outputs.instance_ip }}
        run: |
          # Wait for instance to be ready
          echo "Waiting for EC2 instance to be ready..."
          sleep 60

          # Create a deployment package
          mkdir -p deployment
          cp docker-compose.yml deployment/
          cp -r backend deployment/ 2>/dev/null || true
          cp -r frontend deployment/ 2>/dev/null || true
          cp -r docker deployment/ 2>/dev/null || true

          # Create .env file for production
          cat > deployment/.env << EOF
          POSTGRESDB_USER=todouser
          POSTGRESDB_ROOT_PASSWORD=your_secure_password_here
          POSTGRESDB_DATABASE=todoapp
          POSTGRESDB_LOCAL_PORT=5432
          POSTGRESDB_DOCKER_PORT=5432
          NODE_ENV=production
          PORT=3000
          EOF

          echo "Application deployment package created"
          echo "Next manual step: Copy files to EC2 and run deployment"
          echo "Instance IP: $INSTANCE_IP"

      - name: Health Check (Basic)
        run: |
          echo "Performing basic connectivity check..."
          INSTANCE_IP="${{ steps.get_instance.outputs.instance_ip }}"

          # Basic ping test (if ICMP is allowed)
          echo "Testing connectivity to $INSTANCE_IP..."

          # Note: Actual health check would require SSH or proper application deployment
          echo "âœ… Infrastructure deployed successfully!"
          echo "Manual deployment of application code required on EC2 instance"

      - name: Create Deployment Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # Infrastructure Deployment Successful!

          ## Access Your EC2 Instance
          - **Public IP**: \`${{ steps.get_instance.outputs.instance_ip }}\`
          - **Public DNS**: \`${{ steps.get_instance.outputs.instance_dns }}\`
          - **SSH Command**: \`ssh -i ~/.ssh/your-key.pem ubuntu@${{ steps.get_instance.outputs.instance_ip }}\`

          ## Next Manual Steps
          1. SSH into the instance
          2. Navigate to \`/opt/todo-app/\`
          3. Copy your docker-compose.yml and application code
          4. Update the .env file with secure values
          5. Run: \`sudo systemctl start todo-app.service\`

          ## Application URLs (after manual deployment)
          - **Frontend**: [${{ steps.get_instance.outputs.frontend_url }}](${{ steps.get_instance.outputs.frontend_url }})
          - **Backend API**: [${{ steps.get_instance.outputs.backend_url }}](${{ steps.get_instance.outputs.backend_url }})

          ## Infrastructure Details
          - **Environment**: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}
          - **Instance Type**: t2.small
          - **Region**: ${{ vars.AWS_REGION }}
          - **Deployed Branch**: ${{ github.ref_name }}
          - **Commit SHA**: ${{ github.sha }}

          EOF
